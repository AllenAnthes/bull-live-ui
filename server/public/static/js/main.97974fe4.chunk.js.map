{"version":3,"sources":["JsonDetailCard.js","DetailPanel.js","utils.js","DeleteConfirmationDialog.js","Table.js","App.js","index.js"],"names":["JsonDetailCard","data","title","Card","elevation","CardHeader","CardContent","collapsed","displayDataTypes","enableClipboard","src","shouldCollapse","Array","isArray","length","name","DetailPanel","rowData","Grid","container","spacing","justify","style","padding","stacktrace","item","xs","opts","formatTime","fieldOrDate","date","Date","getDate","time","format","fromNow","formatDistanceToNow","includeSeconds","addSuffix","Typography","variant","DeleteConfirmationDialog","tab","onClose","tableRef","baseUrl","Dialog","open","DialogTitle","DialogContent","DialogActions","Button","autoFocus","onClick","fetch","method","then","current","onQueryChange","color","useStyles","makeStyles","theme","progressBar","backgroundColor","palette","success","main","progressBarError","error","liveUpdateButton","isLiveUpdating","action","disabled","fontSize","maxWidth","minWidth","socket","socketIOClient","process","REACT_APP_SOCKET_IO_URI","transports","Table","queueName","useRef","isFirstRender","useQueryParam","StringParam","setTab","useState","counts","setCounts","tabToClear","setTabToClear","setIsLiveUpdating","rowsPerPage","setRowsPerPage","classes","window","location","origin","pathname","useEffect","emit","ackResponse","removeAllListeners","on","columns","field","width","render","id","slice","removable","LinearProgress","thickness","barColorPrimary","failedReason","value","progress","hidden","timestamp","delay","includes","processedOn","formatDistanceStrict","unit","finishedOn","getColumns","actions","isFreeAction","tooltip","icon","className","prev","iconProps","event","toolTip","tableOptions","initialPage","loadingType","pageSize","pageSizeOptions","actionsColumnIndex","columnsButton","search","sorting","Paper","square","Tabs","onChange","newTab","map","type","index","Tab","key","label","aria-controls","onChangeRowsPerPage","numRows","options","query","url","URL","Object","entries","filter","val","Boolean","forEach","searchParams","append","toString","res","json","jobs","newCounts","totalCount","page","maxPages","Math","floor","min","detailPanel","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","drawerHeaderTitle","textAlign","content","flexGrow","contentShift","App","useQueryParams","queue","withDefault","setParams","React","setOpen","queues","setQueues","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","aria-label","edge","noWrap","Drawer","anchor","paper","Divider","List","text","ListItem","button","ListItemIcon","ListItemText","primary","ReactDOM","ReactRouterRoute","Route","document","getElementById"],"mappings":"0jBAsBeA,EAhBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACrB,kBAACC,EAAA,EAAD,CAAMC,UAAW,GACf,kBAACC,EAAA,EAAD,CAAYH,MAAOA,IACnB,kBAACI,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,UAAW,EACXC,kBAAkB,EAClBC,iBAAiB,EACjBC,IAAKT,EACLU,eAAgB,gBAAGD,EAAH,EAAGA,IAAH,OAAaE,MAAMC,QAAQH,IAAQA,EAAII,OAAS,GAChEC,KAAM,UCKCC,EAhBK,SAAC,GAAD,MAAGC,EAAH,EAAGA,QAAH,OAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,eAAeC,MAAO,CAAEC,QAAS,UAClE,UAAAN,EAAQO,kBAAR,eAAoBV,QAAS,GAC5B,kBAACI,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAAgBzB,KAAMgB,EAAQO,WAAYtB,MAAM,iBAGpD,kBAACgB,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAAgBzB,KAAMgB,EAAQhB,KAAMC,MAAM,WAE5C,kBAACgB,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAAgBzB,KAAMgB,EAAQU,KAAMzB,MAAM,gB,oCCL1C0B,EAAa,SAACC,GAAD,OAAiB,SAAC5B,GACnC,IAAM6B,EAPQ,SAAC,GAA2B,IAAzBD,EAAwB,EAAxBA,YAAa5B,EAAW,EAAXA,KAC9B,OAAI4B,aAAuBE,KAAaF,EACnC5B,EAAK4B,GACH,IAAIE,KAAK9B,EAAK4B,SADrB,EAKaG,CAAQ,CAAEH,cAAa5B,SACpC,GAAK6B,EAAL,CAEA,IAAMG,EAAOC,kBAAOJ,EAAM,YACpBK,EAAUC,YAAoBN,EAAM,CAAEO,gBAAgB,EAAMC,WAAW,IAC7E,OACE,oCACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SAASP,GAC7B,kBAACM,EAAA,EAAD,CAAYC,QAAQ,WAApB,IAAgCL,EAAhC,S,iDCYSM,GAzBkB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAM1D,OACE,kBAACC,GAAA,EAAD,CAAQC,MAAM,EAAMJ,QAASA,GAC3B,kBAACK,GAAA,EAAD,oBAEA,kBAACC,GAAA,EAAD,4CACuCP,EADvC,iCAGA,kBAACQ,GAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,WAAS,EAACZ,QAAQ,WAAWa,QAASV,GAA9C,UAGA,kBAACQ,EAAA,EAAD,CAAQE,QAhBI,kBAChBC,MAAM,GAAD,OAAIT,EAAJ,sBAAyBH,GAAO,CAAEa,OAAQ,WAC5CC,KAAKZ,EAASa,QAAQC,eACtBF,KAAKb,IAawBH,QAAQ,YAAYmB,MAAM,aAAtD,cCTFC,GAAYC,KAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXC,gBAAiBF,EAAMG,QAAQC,QAAQC,MAEzCC,iBAAkB,CAChBJ,gBAAiBF,EAAMG,QAAQI,MAAMF,MAEvCG,iBAAkB,CAChBX,MAAO,qBAAGY,eACST,EAAMG,QAAQC,QAAQC,KAAOL,EAAMG,QAAQO,OAAOC,WAEvEvE,MAAO,CACLwE,SAAU,IAEZvD,UAAW,CACTwD,SAAU,OACVC,SAAU,WAIRC,GAASC,IAAeC,oHAAYC,wBAAyB,CACjEC,WAAY,CAAC,YAAa,aAmKbC,GAhKD,SAAC,GAAyB,IAAjBC,EAAgB,EAAtBpE,KACT6B,EAAWwC,mBACXC,EAAgBD,kBAAO,GAFQ,EAGfE,YAAc,MAAOC,KAHN,mBAG9B7C,EAH8B,KAGzB8C,EAHyB,OAITC,mBAAS,IAJA,mBAI9BC,EAJ8B,KAItBC,EAJsB,OAKDF,mBAAS,MALR,mBAK9BG,EAL8B,KAKlBC,EALkB,OAMOJ,oBAAS,GANhB,mBAM9BlB,EAN8B,KAMduB,EANc,OAOCL,mBAAS,IAPV,mBAO9BM,EAP8B,KAOjBC,EAPiB,KAQ/BC,EAAUrC,GAAU,CAAEW,mBAEtB1B,EAAO,UAAMqD,OAAOC,SAASC,QAAtB,OAA+BF,OAAOC,SAASE,SAA/C,kBAAiElB,GAE9EmB,qBAAU,WAQR,OAPI/B,EACFM,GAAO0B,KAAK,WAAY,CAAEpB,cAAa,SAACqB,GACtCb,EAAUa,EAAYd,WAGxBb,GAAO0B,KAAK,aAAc,CAAEpB,cAEvB,WAAWN,GAAO0B,KAAK,aAAc,CAAEpB,iBAC7C,CAACZ,EAAgBY,IAEpBmB,qBAAU,YAEHjB,EAAc5B,SAAWb,EAASa,SACrCb,EAASa,QAAQC,gBAEnB2B,EAAc5B,SAAU,IACvB,CAAC0B,IAEJmB,qBAAU,WACRzB,GAAO4B,qBACP5B,GAAO6B,GAAG,YAAY,SAACzG,GACrB2C,EAASa,SAAWb,EAASa,QAAQC,gBACrCiC,EAAU1F,EAAKyF,aAEhB,IAEH,IAAMiB,EFrDkB,SAAC,GAAsB,IAApBV,EAAmB,EAAnBA,QAASvD,EAAU,EAAVA,IACpC,MAAO,CACL,CACExC,MAAO,KACP0G,MAAO,KACPC,MAAO,GACPC,OAAQ,SAAC7G,GACP,OAAIA,EAAK8G,GAAGjG,OAAS,GACb,IAAN,OAAWb,EAAK8G,GAAGC,MAAM,EAAG,IAA5B,OAEI,IAAN,OAAW/G,EAAK8G,MAGpB,CACE7G,MAAO,WACP0G,MAAO,WACPK,WAAW,EACXJ,MAAO,GACPC,OAAQ,SAAC7G,GAAD,OACN,kBAACiH,EAAA,EAAD,CACEC,UAAW,GACXxD,MAAM,UACNsC,QAAS,CACPmB,gBAAiBnH,EAAKoH,aAAepB,EAAQ7B,iBAAmB6B,EAAQlC,aAE1EuD,MAAOrH,EAAKsH,SACZ/E,QAAQ,kBAId,CACEtC,MAAO,UACP0G,MAAO,YACPE,OAAQlF,EAAW,aACnBiF,MAAO,KAET,CACE3G,MAAO,WACPsH,OAAgB,YAAR9E,EACRoE,OAAQ,SAAC7G,GACP,IAAM6B,EAAO,IAAIC,KAAK9B,EAAKwH,UAAYxH,EAAKyH,OAC5C,OAAO9F,EAAWE,EAAXF,CAAiB3B,KAG5B,CACEC,MAAO,cACP0G,MAAO,cACPE,OAAQlF,EAAW,eACnBiF,MAAO,IACPW,OAAQ,CAAC,UAAW,WAAWG,SAASjF,IAE1C,CACExC,MAAO,SACP0G,MAAO,cACPC,MAAO,IACPC,OAAQ,SAAC7G,GACP,GAAKA,EAAK2H,YACV,OAAOC,YAAqB,IAAI9F,KAAK9B,EAAK2H,aAAc,IAAI7F,KAAK9B,EAAKwH,WAAY,CAChFK,KAAM,YAGVN,OAAQ,CAAC,UAAW,WAAWG,SAASjF,IAE1C,CACExC,MAAO,WACP0G,MAAO,aACPC,MAAO,IACPC,OAAQlF,EAAW,cACnB4F,QAAS,CAAC,SAAU,YAAa,UAAUG,SAASjF,IAEtD,CACExC,MAAO,WACP0G,MAAO,aACPC,MAAO,IACPC,OAAQ,SAAC7G,GACP,GAAKA,EAAK8H,WACV,OAAOF,YAAqB,IAAI9F,KAAK9B,EAAK8H,YAAa,IAAIhG,KAAK9B,EAAKwH,WAAY,CAC/EK,KAAM,YAGVN,QAAS,CAAC,SAAU,YAAa,UAAUG,SAASjF,IAEtD,CACExC,MAAO,iBACP0G,MAAO,aACPC,MAAO,IACPC,OAAQ,SAAC7G,GACP,GAAKA,EAAK8H,WACV,OAAOF,YAAqB,IAAI9F,KAAK9B,EAAK8H,YAAa,IAAIhG,KAAK9B,EAAK2H,aAAc,CACjFE,KAAM,YAGVN,QAAS,CAAC,SAAU,YAAa,UAAUG,SAASjF,IAEtD,CAAExC,MAAO,gBAAiB0G,MAAO,eAAgBY,OAAgB,WAAR9E,IEzC3CsF,CAAW,CAAE/B,UAASvD,QAuBhCuF,EAAU,CACd,CACEC,cAAc,EACdC,QAAQ,GAAD,OAAK5D,EAAiB,UAAY,SAAlC,iBACP6D,KAAM,kBAAM,kBAAC,IAAD,CAAeC,UAAWpC,EAAQ3B,oBAC9CjB,QAAS,kBAAMyC,GAAkB,SAACwC,GAAD,OAAWA,OAE9C,CACEJ,cAAc,EACdC,QAAQ,cAAD,OAAgBzF,EAAhB,SACP0F,KAAM,SACNG,UAAW,CAAE5E,MAAO,SACpBN,QAAS,kBAAMwC,EAAcnD,IAC7B8E,OAAgB,WAAR9E,GAEV,CACE0F,KAAM,SACND,QAAS,aACTI,UAAW,CAAE5E,MAAO,SACpBN,QAAS,SAACmF,EAAOvH,GAAR,OACPqC,MAAM,GAAD,OAAIT,EAAJ,iBAAoB5B,EAAQ8F,IAAM,CAAExD,OAAQ,WAAYC,KAC3DZ,EAASa,QAAQC,iBAGvB,SAACzC,GAAD,MAAc,CACZmH,KAAM,SACN3D,UAAWxD,EAAQoG,aACnBoB,QAAS,QACTpF,QAAS,SAACmF,EAAD,OAAUzB,EAAV,EAAUA,GAAV,OACPzD,MAAM,GAAD,OAAIT,EAAJ,iBAAoBkE,EAApB,UAAgC,CAAExD,OAAQ,SAAUC,KACvDZ,EAASa,QAAQC,gBAErB8D,QAASvG,EAAQoG,gBAIfqB,EAAe,CACnBC,YAAa,EACbC,YAAa,SACbC,SAAU9C,EACV+C,gBAAiB,CAAC,EAAG,GAAI,GAAI,GAAI,KACjCC,oBAAqB,EACrBC,eAAe,EACfC,QAAQ,EACRC,SAAS,GAGX,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACf,UAAWpC,EAAQ9E,WAC/B,kBAACkI,EAAA,EAAD,CACE/B,MAAO5E,GAAO,SACd4G,SAAU,SAACd,EAAOe,GAChB/D,EAAO+D,GACP3G,EAASa,SAAWb,EAASa,QAAQC,kBAGtC,CAAC,SAAU,SAAU,UAAW,YAAa,SAAU,UAAW,UAAU8F,KAC3E,SAACC,EAAMC,GAAP,OACE,kBAACC,EAAA,EAAD,CACEC,IAAKH,EACLI,MACE,kBAACtH,EAAA,EAAD,eACMkH,EADN,MAEG/D,EAAO+D,GACN,kBAAClH,EAAA,EAAD,CAAYC,QAAQ,WAApB,IAAgCkD,EAAO+D,GAAvC,KACE,MAGRnC,MAAOmC,EACPK,gBAAA,mBAA2BJ,GAC3B3C,GAAE,cAAS2C,SAKnB,kBAAC,IAAD,CACEK,oBAAqB,SAACC,GAAD,OAAahE,EAAegE,IACjDpH,SAAUA,EACVqF,QAASA,EACTgC,QAASvB,EACTzI,KArGkB,SAACiK,GACvB,IAAMC,EAAM,IAAIC,IAAJ,UAAWvH,EAAX,UAOZ,OANAwH,OAAOC,QAAQJ,GACZK,QAAO,mCAAOC,GAAP,kBAAgBC,QAAQD,MAC/BE,SAAQ,mCAAEd,EAAF,KAAOY,EAAP,YAAgBL,EAAIQ,aAAaC,OAAOhB,EAAKY,MAE5C,WAAR9H,GAAkByH,EAAIQ,aAAaC,OAAO,OAAQlI,GAE/CY,MAAM6G,EAAIU,YACdrH,MAAK,SAACsH,GAAD,OAASA,EAAIC,UAClBvH,MAAK,SAACsH,GAAS,IAAD,SACuBA,QADvB,IACuBA,IAAO,GAAnCE,EADK,EACLA,KAAcC,EADT,EACCvF,OADD,SAEsBsF,QAFtB,IAEsBA,IAAQ,GAAnCE,EAFK,EAELA,WAAYC,EAFP,EAEOA,KAAMlL,EAFb,EAEaA,KAE1B0F,EAAUsF,GAEV,IAAMG,EAAWC,KAAKC,MAAMN,EAAKE,WAAahB,EAAMrB,UACpD,MAAO,CAAEqC,aAAYC,KAAME,KAAKE,IAAIH,EAAUD,GAAOlL,YAqFrDC,MAAOiF,EACPwB,QAASA,EACT6E,YAAa,SAACvK,GAAD,OAAa,kBAAC,EAAD,CAAaA,QAASA,OAGjD2E,GACC,kBAAC,GAAD,CACEjD,QAAS,kBAAMkD,EAAc,OAC7BnD,IAAKkD,EACLhD,SAAUA,EACVC,QAASA,MCzKbe,GAAYC,KAAW,SAACC,GAAD,MAAY,CACvC2H,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNC,WAAY9H,EAAM+H,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQjI,EAAM+H,YAAYE,OAAOC,MACjCC,SAAUnI,EAAM+H,YAAYI,SAASC,iBAGzCC,YAAa,CACXtF,MAAM,eAAD,OAbW,IAaX,OACLuF,WAdgB,IAehBR,WAAY9H,EAAM+H,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQjI,EAAM+H,YAAYE,OAAOM,QACjCJ,SAAUnI,EAAM+H,YAAYI,SAASK,kBAGzCC,WAAY,CACVC,YAAa1I,EAAM1C,QAAQ,IAE7BqL,KAAM,CACJf,QAAS,QAEXgB,OAAQ,CACN7F,MA3BgB,IA4BhB8F,WAAY,GAEdC,YAAa,CACX/F,MA/BgB,KAiClBgG,aAAa,yBACXnB,QAAS,OACToB,WAAY,SACZvL,QAASuC,EAAM1C,QAAQ,EAAG,IAEvB0C,EAAMiJ,OAAOC,SALN,IAMVC,eAAgB,aAElBC,kBAAmB,CACjBC,UAAW,SACXtG,MAAO,QAETuG,QAAS,CACPC,SAAU,EACV9L,QAASuC,EAAM1C,QAAQ,GACvBwK,WAAY9H,EAAM+H,YAAYC,OAAO,SAAU,CAC7CC,OAAQjI,EAAM+H,YAAYE,OAAOC,MACjCC,SAAUnI,EAAM+H,YAAYI,SAASC,gBAEvCE,YApDgB,KAsDlBkB,aAAc,CACZ1B,WAAY9H,EAAM+H,YAAYC,OAAO,SAAU,CAC7CC,OAAQjI,EAAM+H,YAAYE,OAAOM,QACjCJ,SAAUnI,EAAM+H,YAAYI,SAASK,iBAEvCF,WAAY,OA4FDmB,OAxFf,WACE,IAAMtH,EAAUrC,KADH,EAGkB4J,YAAe,CAC5CC,MAAOlI,IACP7C,IAAKgL,YAAYnI,IAAa,YALnB,mBAGJkI,EAHI,KAGJA,MAASE,EAHL,OAQWC,IAAMnI,UAAS,GAR1B,mBAQN1C,EARM,KAQA8K,EARA,OASepI,mBAAS,IATxB,mBASNqI,EATM,KASEC,EATF,KAuBb,OAZAzH,qBAAU,WACRhD,MAAM,GAAD,OAAI4C,OAAOC,SAASC,QAApB,OAA6BF,OAAOC,SAASE,SAA7C,YACF7C,MAAK,SAACsH,GAAD,OAASA,EAAIC,UAClBvH,MAAK,SAACvD,GAAU,IAAD,EACd8N,EAAU9N,EAAK6N,QAAU,KACzB,UAAI7N,EAAK6N,cAAT,aAAI,EAAahN,SACf6M,EAAU,CAAEF,MAAOxN,EAAK6N,OAAO,UAIpC,IAGD,yBAAKzF,UAAWpC,EAAQwF,MACtB,kBAACuC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACEC,SAAS,QACT7F,UAAW8F,YAAKlI,EAAQ0F,OAAT,eACZ1F,EAAQkG,YAAcpJ,KAGzB,kBAACqL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1K,MAAM,UACN2K,aAAW,cACXjL,QAAS,kBAAMwK,GAAQ,IACvBU,KAAK,QACLlG,UAAW8F,YAAKlI,EAAQsG,WAAYxJ,GAAQkD,EAAQwG,OAEpD,kBAAC,IAAD,OAEF,kBAAClK,EAAA,EAAD,CAAYC,QAAQ,KAAKgM,QAAM,GAA/B,kBAKJ,kBAACC,EAAA,EAAD,CACEpG,UAAWpC,EAAQyG,OACnBlK,QAAQ,aACRkM,OAAO,OACP3L,KAAMA,EACNkD,QAAS,CACP0I,MAAO1I,EAAQ2G,cAGjB,yBAAKvE,UAAWpC,EAAQ4G,cACtB,kBAACtK,EAAA,EAAD,CAAY8F,UAAWpC,EAAQiH,kBAAmB1K,QAAS,MAA3D,UAGA,kBAAC6L,EAAA,EAAD,CAAYhL,QAAS,kBAAMwK,GAAQ,KACjC,kBAAC,IAAD,QAGJ,kBAACe,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACGf,EAAOtE,KAAI,SAACsF,GAAD,OACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACpF,IAAKkF,EAAMzL,QAAS,kBAAMsK,EAAU,CAAEF,MAAOqB,MAC5D,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAASL,UAK/B,0BACEzG,UAAW8F,YAAKlI,EAAQmH,QAAT,eACZnH,EAAQqH,aAAevK,KAG1B,yBAAKsF,UAAWpC,EAAQ4G,eACvBY,GAAS,kBAAC,GAAD,CAAO1M,KAAM0M,O,mBChK/B2B,IAAStI,OACP,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAoBuI,iBAAkBC,MACpC,kBAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.97974fe4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactJson from 'react-json-view';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst JsonDetailCard = ({ data, title }) => (\n  <Card elevation={0}>\n    <CardHeader title={title} />\n    <CardContent>\n      <ReactJson\n        collapsed={3}\n        displayDataTypes={false}\n        enableClipboard={false}\n        src={data}\n        shouldCollapse={({ src }) => Array.isArray(src) && src.length > 5}\n        name={null}\n      />\n    </CardContent>\n  </Card>\n);\n\nexport default JsonDetailCard;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport JsonDetailCard from './JsonDetailCard';\n\nconst DetailPanel = ({ rowData }) => (\n  <Grid container spacing={2} justify=\"space-evenly\" style={{ padding: '1rem' }}>\n    {rowData.stacktrace?.length > 0 && (\n      <Grid item xs={12}>\n        <JsonDetailCard data={rowData.stacktrace} title=\"Stacktrace:\" />\n      </Grid>\n    )}\n    <Grid item xs={12}>\n      <JsonDetailCard data={rowData.data} title=\"Data:\" />\n    </Grid>\n    <Grid item xs={12}>\n      <JsonDetailCard data={rowData.opts} title=\"Options:\" />\n    </Grid>\n  </Grid>\n);\n\nexport default DetailPanel;\n","import React from 'react';\nimport { format, formatDistanceStrict, formatDistanceToNow } from 'date-fns';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst getDate = ({ fieldOrDate, data }) => {\n  if (fieldOrDate instanceof Date) return fieldOrDate;\n  if (!data[fieldOrDate]) return;\n  return new Date(data[fieldOrDate]);\n};\n\nconst formatTime = (fieldOrDate) => (data) => {\n  const date = getDate({ fieldOrDate, data });\n  if (!date) return;\n\n  const time = format(date, 'HH:mm:ss');\n  const fromNow = formatDistanceToNow(date, { includeSeconds: true, addSuffix: true });\n  return (\n    <>\n      <Typography variant=\"body2\">{time}</Typography>\n      <Typography variant=\"caption\">({fromNow})</Typography>\n    </>\n  );\n};\n\nexport const getColumns = ({ classes, tab }) => {\n  return [\n    {\n      title: 'Id',\n      field: 'id',\n      width: 75,\n      render: (data) => {\n        if (data.id.length > 12) {\n          return `#${data.id.slice(0, 12)}...`;\n        }\n        return `#${data.id}`;\n      },\n    },\n    {\n      title: 'Progress',\n      field: 'progress',\n      removable: true,\n      width: 50,\n      render: (data) => (\n        <LinearProgress\n          thickness={10}\n          color=\"primary\"\n          classes={{\n            barColorPrimary: data.failedReason ? classes.progressBarError : classes.progressBar,\n          }}\n          value={data.progress}\n          variant=\"determinate\"\n        />\n      ),\n    },\n    {\n      title: 'Created',\n      field: 'timestamp',\n      render: formatTime('timestamp'),\n      width: 200,\n    },\n    {\n      title: 'Next Run',\n      hidden: tab !== 'delayed',\n      render: (data) => {\n        const date = new Date(data.timestamp + data.delay);\n        return formatTime(date)(data);\n      },\n    },\n    {\n      title: 'Job Started',\n      field: 'processedOn',\n      render: formatTime('processedOn'),\n      width: 200,\n      hidden: ['waiting', 'delayed'].includes(tab),\n    },\n    {\n      title: 'Waited',\n      field: 'processedOn',\n      width: 200,\n      render: (data) => {\n        if (!data.processedOn) return;\n        return formatDistanceStrict(new Date(data.processedOn), new Date(data.timestamp), {\n          unit: 'second',\n        });\n      },\n      hidden: ['waiting', 'delayed'].includes(tab),\n    },\n    {\n      title: 'Finished',\n      field: 'finishedOn',\n      width: 200,\n      render: formatTime('finishedOn'),\n      hidden: !['latest', 'completed', 'failed'].includes(tab),\n    },\n    {\n      title: 'Run Time',\n      field: 'finishedOn',\n      width: 100,\n      render: (data) => {\n        if (!data.finishedOn) return;\n        return formatDistanceStrict(new Date(data.finishedOn), new Date(data.timestamp), {\n          unit: 'second',\n        });\n      },\n      hidden: !['latest', 'completed', 'failed'].includes(tab),\n    },\n    {\n      title: 'Execution Time',\n      field: 'finishedOn',\n      width: 100,\n      render: (data) => {\n        if (!data.finishedOn) return;\n        return formatDistanceStrict(new Date(data.finishedOn), new Date(data.processedOn), {\n          unit: 'second',\n        });\n      },\n      hidden: !['latest', 'completed', 'failed'].includes(tab),\n    },\n    { title: 'Failed Reason', field: 'failedReason', hidden: tab !== 'failed' },\n  ];\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst DeleteConfirmationDialog = ({ tab, onClose, tableRef, baseUrl }) => {\n  const onConfirm = () =>\n    fetch(`${baseUrl}/jobs?type=${tab}`, { method: 'DELETE' })\n      .then(tableRef.current.onQueryChange)\n      .then(onClose);\n\n  return (\n    <Dialog open={true} onClose={onClose}>\n      <DialogTitle>Delete Jobs</DialogTitle>\n\n      <DialogContent>\n        Are you sure you want to delete all {tab} jobs? This cannot be undone.\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button onClick={onConfirm} variant=\"contained\" color=\"secondary\">\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DeleteConfirmationDialog;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { StringParam, useQueryParam } from 'use-query-params';\nimport MaterialTable from 'material-table';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport socketIOClient from 'socket.io-client';\n\nimport DetailPanel from './DetailPanel';\nimport { getColumns } from './utils';\nimport DeleteConfirmationDialog from './DeleteConfirmationDialog';\n\nconst useStyles = makeStyles((theme) => ({\n  progressBar: {\n    backgroundColor: theme.palette.success.main,\n  },\n  progressBarError: {\n    backgroundColor: theme.palette.error.main,\n  },\n  liveUpdateButton: {\n    color: ({ isLiveUpdating }) =>\n      isLiveUpdating ? theme.palette.success.main : theme.palette.action.disabled,\n  },\n  title: {\n    fontSize: 14,\n  },\n  container: {\n    maxWidth: '100%',\n    minWidth: '75%',\n  },\n}));\n\nconst socket = socketIOClient(process.env.REACT_APP_SOCKET_IO_URI, {\n  transports: ['websocket', 'polling'],\n});\n\nconst Table = ({ name: queueName }) => {\n  const tableRef = useRef();\n  const isFirstRender = useRef(true);\n  const [tab, setTab] = useQueryParam('tab', StringParam);\n  const [counts, setCounts] = useState({});\n  const [tabToClear, setTabToClear] = useState(null);\n  const [isLiveUpdating, setIsLiveUpdating] = useState(true);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const classes = useStyles({ isLiveUpdating });\n\n  const baseUrl = `${window.location.origin}${window.location.pathname}queues/${queueName}`;\n\n  useEffect(() => {\n    if (isLiveUpdating) {\n      socket.emit('subQueue', { queueName }, (ackResponse) => {\n        setCounts(ackResponse.counts);\n      });\n    } else {\n      socket.emit('unsubQueue', { queueName });\n    }\n    return () => void socket.emit('unsubQueue', { queueName });\n  }, [isLiveUpdating, queueName]);\n\n  useEffect(() => {\n    // re-fetch when different queue is selected\n    if (!isFirstRender.current && tableRef.current) {\n      tableRef.current.onQueryChange();\n    }\n    isFirstRender.current = false;\n  }, [queueName]);\n\n  useEffect(() => {\n    socket.removeAllListeners();\n    socket.on('progress', (data) => {\n      tableRef.current && tableRef.current.onQueryChange();\n      setCounts(data.counts);\n    });\n  }, []);\n\n  const columns = getColumns({ classes, tab });\n\n  const getDataForTable = (query) => {\n    const url = new URL(`${baseUrl}/jobs`);\n    Object.entries(query)\n      .filter(([key, val]) => Boolean(val))\n      .forEach(([key, val]) => url.searchParams.append(key, val));\n\n    if (tab !== 'latest') url.searchParams.append('type', tab);\n\n    return fetch(url.toString())\n      .then((res) => res.json())\n      .then((res) => {\n        const { jobs, counts: newCounts } = res ?? {};\n        const { totalCount, page, data } = jobs ?? {};\n\n        setCounts(newCounts);\n\n        const maxPages = Math.floor(jobs.totalCount / query.pageSize);\n        return { totalCount, page: Math.min(maxPages, page), data };\n      });\n  };\n\n  const actions = [\n    {\n      isFreeAction: true,\n      tooltip: `${isLiveUpdating ? 'Disable' : 'Enable'} Live Updates`,\n      icon: () => <PlayArrowIcon className={classes.liveUpdateButton} />,\n      onClick: () => setIsLiveUpdating((prev) => !prev),\n    },\n    {\n      isFreeAction: true,\n      tooltip: `Delete all ${tab} jobs`,\n      icon: 'delete',\n      iconProps: { color: 'error' },\n      onClick: () => setTabToClear(tab),\n      hidden: tab === 'latest',\n    },\n    {\n      icon: 'delete',\n      tooltip: 'Remove job',\n      iconProps: { color: 'error' },\n      onClick: (event, rowData) =>\n        fetch(`${baseUrl}/jobs/${rowData.id}`, { method: 'DELETE' }).then(\n          tableRef.current.onQueryChange\n        ),\n    },\n    (rowData) => ({\n      icon: 'replay',\n      disabled: !rowData.failedReason,\n      toolTip: 'Retry',\n      onClick: (event, { id }) =>\n        fetch(`${baseUrl}/jobs/${id}/retry`, { method: 'POST' }).then(\n          tableRef.current.onQueryChange\n        ),\n      hidden: !rowData.failedReason,\n    }),\n  ];\n\n  const tableOptions = {\n    initialPage: 0,\n    loadingType: 'linear',\n    pageSize: rowsPerPage,\n    pageSizeOptions: [5, 10, 20, 50, 100],\n    actionsColumnIndex: -1,\n    columnsButton: true,\n    search: false,\n    sorting: false,\n  };\n\n  return (\n    <Paper square className={classes.container}>\n      <Tabs\n        value={tab || 'latest'}\n        onChange={(event, newTab) => {\n          setTab(newTab);\n          tableRef.current && tableRef.current.onQueryChange();\n        }}\n      >\n        {['latest', 'active', 'waiting', 'completed', 'failed', 'delayed', 'paused'].map(\n          (type, index) => (\n            <Tab\n              key={type}\n              label={\n                <Typography>\n                  {`${type}  `}\n                  {counts[type] ? (\n                    <Typography variant=\"caption\">({counts[type]})</Typography>\n                  ) : null}\n                </Typography>\n              }\n              value={type}\n              aria-controls={`tabpanel-${index}`}\n              id={`tab-${index}`}\n            />\n          )\n        )}\n      </Tabs>\n      <MaterialTable\n        onChangeRowsPerPage={(numRows) => setRowsPerPage(numRows)}\n        tableRef={tableRef}\n        actions={actions}\n        options={tableOptions}\n        data={getDataForTable}\n        title={queueName}\n        columns={columns}\n        detailPanel={(rowData) => <DetailPanel rowData={rowData} />}\n      />\n\n      {tabToClear && (\n        <DeleteConfirmationDialog\n          onClose={() => setTabToClear(null)}\n          tab={tabToClear}\n          tableRef={tableRef}\n          baseUrl={baseUrl}\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport { useQueryParams, StringParam, withDefault } from 'use-query-params';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListIcon from '@material-ui/icons/List';\nimport clsx from 'clsx';\n\nimport Table from './Table';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  drawerHeaderTitle: {\n    textAlign: 'center',\n    width: '100%',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [{ queue }, setParams] = useQueryParams({\n    queue: StringParam,\n    tab: withDefault(StringParam, 'latest'),\n  });\n\n  const [open, setOpen] = React.useState(true);\n  const [queues, setQueues] = useState([]);\n\n  useEffect(() => {\n    fetch(`${window.location.origin}${window.location.pathname}queues/`)\n      .then((res) => res.json())\n      .then((data) => {\n        setQueues(data.queues || []);\n        if (data.queues?.length) {\n          setParams({ queue: data.queues[0] });\n        }\n      });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={() => setOpen(true)}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h5\" noWrap>\n            Bull Live UI\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Typography className={classes.drawerHeaderTitle} variant={'h6'}>\n            Queues\n          </Typography>\n          <IconButton onClick={() => setOpen(false)}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {queues.map((text) => (\n            <ListItem button key={text} onClick={() => setParams({ queue: text })}>\n              <ListItemIcon>\n                <ListIcon />\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {queue && <Table name={queue} />}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}